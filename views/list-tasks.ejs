<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Task Manager App</title>
  <link rel="stylesheet" href="/styles/style-list.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body>
  <!-- Fixed Navigation Bar -->
  <nav>TASK MANAGER APP</nav>
  
  <!-- Main Content Container -->
  <div class="container">
    <a href="/tasks/add"><button class="add-button">Add Task</button></a>
    <!-- Button to toggle sound -->
    <button id="toggle-sound" class="add-button">Enable Sound</button>
    
    <table>
      <thead>
        <tr>
          <th>S/N</th>
          <th>Tasks</th>
          <th>Alarm Time</th>
          <th>Checkbox</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% if (tasks.length === 0) { %>
          <tr>
            <td colspan="5">No tasks found</td>
          </tr>
        <% } else { %>
          <% tasks.forEach((task, index) => { %>
            <tr>
              <td><%= index + 1 %></td>
              <td>
                <a href="/tasks/single-task/<%= task._id %>"><%= task.task %></a>
              </td>
              <td>
                <%= task.alarm ? new Date(task.alarm).toLocaleString() : 'No alarm' %>
              </td>
              <td>
                <form>
                  <label class="custom-checkbox">
                    <input type="checkbox" name="check" <%= task.check ? 'checked' : '' %> disabled>
                    <span class="checkmark"></span>
                  </label>
                </form>
              </td>
              <td>
                <a href="/tasks/edit/<%= task._id %>" class="edit-button">Edit</a>
                <form action="/tasks/delete/<%= task._id %>?_method=DELETE" method="post" style="display: inline;">
                  <button type="submit" class="delete-button">Delete</button>
                </form>
              </td>
            </tr>
          <% }) %>
        <% } %>
      </tbody>
    </table>
  </div>
  
  <!-- Footer -->
  <footer>
    <h3>Created by Ossai Mark</h3>
  </footer>
  
  <!-- Audio Element (Optional if using AudioContext) -->
  <audio id="alarm-sound" src="/sounds/alarm.mp3"></audio>
  
  <!-- Client-Side JavaScript for Alarms & Notifications -->
  <script>
    // Get tasks from server-rendered JSON
    let tasks = <%- JSON.stringify(tasks) %>;

    // Initialize AudioContext
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();

    // Track sound state, buffer, and source
    let isSoundEnabled = false;
    let alarmSoundBuffer;
    let alarmSoundSource = null;

    // Load the alarm sound file
    function loadAlarmSound() {
      fetch("/sounds/alarm.mp3")
        .then(response => response.arrayBuffer())
        .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
        .then(buffer => {
          console.log("Alarm sound loaded successfully");
          alarmSoundBuffer = buffer;
        })
        .catch(error => {
          console.error("Failed to load alarm sound:", error);
        });
    }
    loadAlarmSound();

    // Function to play the alarm sound
    function playAlarmSound() {
      if (isSoundEnabled && alarmSoundBuffer) {
        if (alarmSoundSource) {
          alarmSoundSource.stop();
        }
        alarmSoundSource = audioContext.createBufferSource();
        alarmSoundSource.buffer = alarmSoundBuffer;
        alarmSoundSource.connect(audioContext.destination);
        alarmSoundSource.start();
      }
    }

    // Toggle sound button event listener
    const toggleSoundButton = document.getElementById("toggle-sound");
    toggleSoundButton.addEventListener("click", () => {
      isSoundEnabled = !isSoundEnabled;
      toggleSoundButton.textContent = isSoundEnabled ? "Disable Sound" : "Enable Sound";
      if (isSoundEnabled) {
        audioContext.resume().then(() => {
          console.log("Audio context enabled");
        });
      }
    });

    // (Optional) Fetch updated tasks from server for real-time data
    function updateTasks() {
      fetch("/tasks/json")
        .then(response => response.json())
        .then(latestTasks => { tasks = latestTasks; })
        .catch(error => console.error("Error updating tasks:", error));
    }
    // Uncomment the following line if you add the JSON endpoint:
    // setInterval(updateTasks, 60000);

    // Function to check for alarms and trigger notifications/sound
    function checkAlarms() {
      const now = new Date();
      tasks.forEach(task => {
        if (task.check) return;
        if (task.alarm) {
          const alarmTime = new Date(task.alarm);
          if (alarmTime <= now) {
            Toastify({
              text: `ALARM: Time to complete "${task.task}"!`,
              duration: 6000,
              gravity: "top",
              position: "right",
              backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
              onClick: () => { alert("Task alarm clicked!"); }
            }).showToast();
            playAlarmSound();
          }
        }
      });
    }

    // Check for alarms every 6 seconds (adjust as needed)
    setInterval(checkAlarms, 6000);

    // Resume AudioContext when page becomes visible
    document.addEventListener("visibilitychange", () => {
      if (!document.hidden && isSoundEnabled) {
        audioContext.resume().then(() => {
          console.log("Audio context resumed after visibility change");
        });
      }
    });
  </script>
</body>
</html>
