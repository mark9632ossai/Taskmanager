<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager App</title>
    <link rel="stylesheet" href="/styles/style-list.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body>
    <nav>TASK MANAGER APP</nav>
    <div class="container">
        <a href="/tasks/add"><button class="add-button">Add Task</button></a>

        <!-- Button to toggle sound -->
        <button id="toggle-sound" class="add-button">Enable Sound</button>

        <table>
            <thead>
                <tr>
                    <th>S/N</th>
                    <th>Tasks</th>
                    <th>Alarm Time</th>
                    <th>Checkbox</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% if (tasks.length === 0) { %>
                    <tr>
                        <td colspan="5">No tasks found</td>
                    </tr>
                <% } else { %>
                    <% tasks.forEach((task, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td> <!-- Serial number is index + 1 -->
                            <td>
                                <a href="/tasks/single-task/<%= task._id %>"><%= task.task %></a>
                            </td>
                            <td><%= task.alarm ? task.alarm.toLocaleString() : 'No alarm' %></td>
                            <td>
                                <form>
                                    <label class="custom-checkbox">
                                        <input type="checkbox" name="check" <%= task.check ? 'checked' : '' %> disabled>
                                        <span class="checkmark"></span>
                                    </label>
                                </form>
                            </td>
                            <td>
                                <a href="/tasks/edit/<%= task._id %>" class="edit-button">Edit</a>
                                <form action="/tasks/delete/<%= task._id %>?_method=DELETE" method="post" style="display: inline;">
                                    <button type="submit" class="delete-button">Delete</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                <% } %>
            </tbody>
        </table>
    </div>
    <footer>
        <h3>Created by Ossai Mark</h3>
    </footer>

    <!-- Audio element for the alarm sound -->
    <audio id="alarm-sound" src="/sounds/alarm.mp3"></audio>

    <script>
        // Pass tasks from backend to frontend
        const tasks = <%- JSON.stringify(tasks) %>;

        // Initialize Web Audio API
        let alarmSoundBuffer;
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // Load the sound file
        fetch("/sounds/alarm.mp3")
            .then(response => response.arrayBuffer())
            .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
            .then(buffer => {
                console.log("Alarm sound loaded successfully");
                alarmSoundBuffer = buffer;
            })
            .catch(error => {
                console.error("Failed to load alarm sound:", error);
            });

        // Track sound state
        let isSoundEnabled = false;

        // Function to play the alarm sound
        function playAlarmSound() {
            if (isSoundEnabled && alarmSoundBuffer) {
                const source = audioContext.createBufferSource();
                source.buffer = alarmSoundBuffer;
                source.connect(audioContext.destination);
                source.start();
            }
        }

        // Toggle sound button
        const toggleSoundButton = document.getElementById("toggle-sound");
        toggleSoundButton.addEventListener("click", () => {
            isSoundEnabled = !isSoundEnabled; // Toggle sound state
            toggleSoundButton.textContent = isSoundEnabled ? "Disable Sound" : "Enable Sound";

            // Resume audio context if enabling sound
            if (isSoundEnabled) {
                audioContext.resume().then(() => {
                    console.log("Audio context enabled");
                });
            }
        });

        // Function to check for alarms
        // list-tasks.ejs
let alarmSoundSource = null; // Track the alarm sound source

function playAlarmSound() {
    if (isSoundEnabled && alarmSoundBuffer) {
        if (alarmSoundSource) {
            alarmSoundSource.stop(); // Stop any existing alarm sound
        }
        alarmSoundSource = audioContext.createBufferSource();
        alarmSoundSource.buffer = alarmSoundBuffer;
        alarmSoundSource.connect(audioContext.destination);
        alarmSoundSource.start();
    }
}

function stopAlarmSound() {
    if (alarmSoundSource) {
        alarmSoundSource.stop();
        alarmSoundSource = null;
    }
}

function checkAlarms() {
    const now = new Date();

    tasks.forEach(task => {
        // Skip tasks that are already completed
        if (task.check) {
            return;
        }

        if (task.alarm) {
            const alarmTime = new Date(task.alarm);
            if (alarmTime <= now) {
                // Trigger Toastify notification
                Toastify({
                    text: `ALARM: Time to complete "${task.task}"!`,
                    duration: 6000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
                    onClick: () => {
                        alert("Task alarm clicked!");
                    },
                }).showToast();

                // Play the alarm sound (if enabled)
                playAlarmSound();
            }
        }
    });
}

        // Check for alarms every minute
        setInterval(checkAlarms, 6000);
    </script>
</body>
</html>